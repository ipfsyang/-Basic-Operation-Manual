一、shell概述
自动化批量系统初始化程序 （update，软件安装，时区设置，安全策略...）
自动化批量软件部署程序（LAMP,LNMP,Tomcat,LVS,Nginx）
管理应用程序（KVM,集群管理扩容，MYSQL）
日志分析处理程序（PV,UV,200,!200,grep/awk,top 100）
自动化备份恢复程序。（mysql完全备份、增量备份+cron）
自动化管理程序（批量远程修改密码，软件升级配置更新）
自动化信息采集及监控程序（收集系统/应用状态信息，cpu，mem，disk，tcp status，net）
配合zabbix信息采集（收集系统/应用状态信息，cpu，mem，disk，tcp status，net）
自动化扩容（增加云主机————业务上线）
  zabbix监控CPU 80%+|-50% python api aws/ec2+shell script（业务上线）
shell可以做任何事（一切取决于业务需求）  
程序语言执行：
C 
JAVA
Shell
Python
程序是由哪些组成：逻辑+数据
 --------------------------------------------
 二、java python shell执行方式对比
 例：sudo vim shell01.sh
#!/bin/bash
ping -c 1 www.baidu.com &>/dev/null && echo "www.baidu.com successful" || echo "www.baidu.com failed!" //如能ping通的话返回successful值，失败则返回failed
&&：命令之间使用&&连接，实现逻辑与的功能只有在&&左边的命令返回真（命令返回值 $? == 0），&& 右边的命令才会被执行只要有一个命令返回假（命令返回值 $? == 1），后面的命令就不会被执行。  
||：命令之间使用||连接，实现逻辑或的功能，只有在||左边的命令返回假（命令返回值 ?==1），||右边的命令才会被执行。这和c语言中的逻辑或语法功能相同，即实现短路逻辑或操作。只要有一个命令返
回真（命令返回值? == 0），后面的命令就不会被执行。
&>：混合输出重定向，包括真确输出和错误输出
/dev/null：表示的是一个黑洞，通常用于丢弃不需要的数据输出，或者用于输入流的空文件
三、bash中调用python expect
#!/bin/bash
ping -c 1 www.baidu.com &>/dev/null && echo "www.baidu.com successful" || echo "www.baidu.com failed!" 这一段是shell语言

/usr/bin/python <<-EOF
print "HELLO WORLD"
EOF 这一段是python语言  <<-EOF是开始，结束语就应该用EOF来结束，这个可以变更的
四、login、nologin特性
在切换用户时，加-，才能执行/etc/profile和~/.bashrc
login shell su - alice 切换到root目录下
/etc/profile
/etc/bashrc  这两个是系统级

nologin shell su alice 不切换到root目录下
~/.etc/profile
~/.etc/bashrc 这两个是用户级
~/.bash_logout
~/.bash_history 
五、GNU/bash shell 特点
1.命令和文件自动补齐
2.命令历史记忆功能 !number、!staring、!$、!!、^R
3.别名功能 alias、unalias cp、~username/.bashrc、\cp -rf /etc/hosts
4.前后台作业控制 &、nohup、^c、^z、screen、bg %1、fg %1
5.输入输出重定向 0,1,2 > >> 2>> 2> 2>&1 &> cat < /etc/hosts cat<<EOF
root@ansible-10:~# cat <<EOF >file
> 111
> 222
> 333
> EOF
也可以这样输入
king@ansible-10:~$ cat >file <<EOF
> 111
> 222
> 333
> EOF
这都是输入到file文件里的
6.管道 |tee
7.分号；不具备逻辑判断，即使命令输入错误，他也会照常执行
8.&& ||具备逻辑判断 false=1返回值为假 true=0返回值为真
例:  ./configure && make && make install (命令返回值$?等于0就执行) //第一条命令执行成功，第二条命令才会执行。同样，第二条命令执行成功，第三条才会执行。
     mkdir /home/king/111/222 && echo 'ok...' //第一条命令执行不成功，第二条命令就不执行
     mkdir -p /home/king/111/222 && echo 'ok...' //第一条命令执行成功，第二条命令继续执行
     ls /home/king/111/222 || mkdir -p /home/king/111/222 (命令返回值$?不等0就执行)//第一条命令执行不成功，第二条命令也会执行
注意:command &  后台执行 
     command &> /dev/null 混合重定向（标准输出1，错误输出2）
     command1 && command2 命令排序，逻辑判断
9.shell通配符（元字符）
* 匹配多个字符
? 匹配一个字符
[] 匹配括号中任意一个字符 [abc] abc中的一个字母   
  [a-z]匹配a-z任意一个字符
  [0-9]匹配0-9任意一个字符
  [a-zA-Z0-9]匹配a-zA-Z0-9任意一个字符
  [^a-zA-Z0-9]括号中带有^字符，就是取反值，意思就是不匹配a-zA-Z0-9任意一个字符，而匹配的符号不如_ - +之类的。
() 在子shell中执行（cd /boot;ls）(umask 077;touch file100)
{} 集合touch file{1..9} //批量创建多个文件
    #mkdir /home/{111,222} mkdir -pv /home/{333/{aaa,bbb},444}
    #mkdir /home/king/{0..35} //连续创建多个目录 
    #rm -rf /home/king/{0..35} //连续删除多个目录 
    #cp -rv /ec/sysconfig/network-scripts/ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfs-eth0.old
     cp -rv /ec/sysconfig/network-scripts/{ifcfg-eth0,ifcfg-eth0.old} //这是上一条命令的缩写（前面一部分是相同的）
     cp -rv /ec/sysconfig/network-scripts/ifcfg-eth0{,.lod} //这是上一条的缩写（，逗号隔开）
 \ 转义符，让元字符回归本意
    #echo *
    #echo \*  //打印*字符
    #touch ipfs\ sheng //创建两个文本 如果不加空格就会创建一个文本
    
    #mkdir \\
    echo -e "atb" //打印atb字母
    echo -e "a\tb" //输出a b字母这里的\t是tab的意思
    echo -e "a\nb" //输出a b字母这里的\n是换行的意思
 10.echo带颜色输出文本
\e[1;31m 红色字体 30--37是文本颜色，40-47是背景颜色
\e[0m表示重置颜色
例子： echo -e "\e[1;31mthis is test.txt \e[0m" //输出红色字体的this is test.txt，并重置文本颜色
      echo -e "\e[1;49m\e[1;30mthis is test.txt \e[0m" //也可以背景颜色和字体混合使用
      echo -e "\e[1;41mthis is test.txt" \e[0m"//输出红色背景的this is test.txt，并重置文本颜色
三、shell变量
  什么是shell变量？  变量的类型
  变量的定义方式
  变量的运算
  变量"内容"的删除和替换
  #!/bin/bash
  ip=10.10.13.101
  ping -c 1 $ip &>/dev/null && echo -e "$ip \e[1;31msuccessful \e[1;0m" || echo -e "$ip \e[1;31mfailed! \e[1;0m"  
  shell变量? 用一个特定的字符串去表示不固定的内容
  变量的类型：
    1.自定义变量
      定义变量：变量名=变量值 变量名必须以字母或下划线开头，区分大小写 例：ip=10.10.13.1格式
      引用变量：$变量名或$变量值
      查看变量：echo $变量名 set（所有变量：包括自定义变量和环境变量）
      取消变量：unset 变量名
      作用范围：仅在当前shell中有效
    2.环境变量
      定义环境变量:
         方法一：export back_dir2=/home/backup
         方法二：export back_dir将自定义变量转换成环境变量
      引用环境变量：$变量名或${变量值}
      查看环境变量：echo $变量名 env 例如：env |grep back_dir2
      取消环境变量：unset
      变量作用范围：在当前shell和子shell中有效
#!/bin/bash
ip=10.10.13.101
  if ping -c 1 $ip &>/dev/null;
  then
          echo -e "$ip \e[1;31msuccessful... \e[1;0m"
  else
          echo -e "$ip \e[1;31mfailed... \e[1;0m"
  fi
-------------------------------------------------------
     C语言   局部变量  VS 全局变量
     Shell  自定义变量 VS 环境变量
   3.位置变量
     $1 $2 $3 $4 $5 $6 $7 $8 $9 ${10}
        例：./shell0o.sh 10.10.13.101 ipfs yang  //10.10.13.101将作为参数赋值给$1,ipfs将作为参数赋值给$2,yang将作为参数赋值给$3,依次类推
   4.预定义变量
     $0 脚本名
     $* 所有的参数
     $@ 所有的参数
     $# 参数的个数
     $$ 当前进程的PID
     $! 上一个后台经常的PID
     $? 上一个命令的返回值 0表示成功
  变量赋值的方式：
    1.显示赋值
      变量名=变量值
       例: ip=10.10.10.10
          school="dongguang guangzhou" //值有空格的时候，就不许用双引号引起来，不然会报错
          today1=$(data +%F) 这是赋予值给today1 （）和``反引号的意思是一样的
          today2=`data +%F` 这是赋予值给today2
    2.read 从键盘读入变量值
      read 变量名
      read -p "提示信息: "变量名
      read -t 5 -p "提示信息: "变量名  //-t time的缩写，5庙后提示信息消失
      read -n 2 变量名  //-n 是输出的结果只能有两个字符
      例: read -p "please input a ip: " ip  //注意双引号后面必须有空格，不然赋予值会失败
          read ip1 ip2 ip3 ip4 //这里有4个变量需要赋值，而不能只输入一个，要不然后3个变量都没值‘
      sudo vi read.sh
      #!/bin/bash
      read -p "please input name: " name
      read -p "please input sex: " sex
      read -p "please input age: " age
      echo "you input name is:$name: ,$sex: , $age: "
      也可以合并写在一起
      #!/bin/bash
      read -p "please input name, sex, age " name sex age //双引号前后必须有空格，要不然达不到预想
      echo "you input name is: $name,$sex, $age" //标点符号空格很重要的，需要在实践中操作
    定义或引用变量时注意事项：
      ""弱引用
      ''强引用
      例：单引号与双引号的区别
        king@ansible-10:~/shell$school=1000phone
        king@ansible-10:~/shell$ echo "${school} is good" 双引号中的变量依然是变量，而已会转化成变量值
        1000phone is good
        king@ansible-10:~/shell$ echo '${school} is good' 单引号中没有变量的，即使有，也会变成没有
        ${school} is good
       ``命令替换 等价于$()反引号中的shell命令优先被执行。
         sudo touch `date +%F`_file.txt ``反引号与$()是一样的
         2021-05-31_file.txt
         sudo touch $(date +%F)_file1.txt 
         2021-05-31_file1.txt
       例:df -h |grep '/$'|awk '{print $4}' 我想把这条命令的值得到的结果正确的赋予在disk1，或disk2上
          disk1=`df -h |grep '/$'|awk '{print $4}'` 这是一种方式，如果改成双引号的话这是打印整条命令
          disk2=$(df -h |grep '/$'|awk '{print $4}') 这是另种方式
          echo $disk1
          echo $disk2 这两个变量值查询结果都是一样的
          1.变量的运算 整数小数
            方法一:$[] 
            echo $[52-4] + - / * %
            echo $[52/2]
            方法二：let 脚本中常用
            let sum=2+3；echo $sum
            let i++;echo $i
            方法三：$(())脚本中常用
            sum=$((1+2)); echo $sum   + - /* %
            echo $(((5-3)*2))
          2.小数运算
           #!/bin/bash
           mem_used=`free -m |grep  '^Mem:'|awk '{print $3}'`
           mem_total=`free -m |grep  '^Mem:'|awk '{print $2}'`
           mem_percent=$((mem_used*100/mem_total))

           echo "Current memory usage percentage： $mem_percent"
           这是计算当前内存使用的百分比：内存总空间/已使用的空间
          3.i++和++i的区别
            一种是对变量值的影响
            i=1
            let i++
            echo $i
            2
            j=1
            let ++j
            echo $j
            2
            另一种对表达式的值的影响
            unset i
            unset j
            i=1
            j=1
            let x=i++ 先赋值，在计算
            let y=++j 先计算，再赋值
            echo $i
            2
            echo $j
            2
            echo $x
            1
            echo $y
            2
      ()    子shell中执行
      (())  数值比较，运算 c语言
      $()   命令替换
      $(()) 整数运算
      
      {}
      ${}

      []    条件测试
      [[]]  条件测试，支持正则 =~
      $[]   整数运算
      
  执行脚本： ./shell.sh 在子shell中执行，需要加执行权限。    bash shell.sh 在子shell中执行，不需要加执行权限
            .shell.sh 在当前shell中执行，不需要加执行权限   

shell四：条件测试
 
 三类条件测试：文件测试，数值比较，字符串比较
      tesh -d 测试返回值为真或假  !取反值
      [ -d /home ]与test -d是一样的
root@ansible-10:/home/king/shell# [ -d /home ]; echo $?
0
root@ansible-10:/home/king/shell# [[ -d /home ]]; echo $? 一个方括号返回值是0，两个方括号也是0
0
-----------------------------------------------------------

      ( EXPRESSION ) 表达式这样写为真 
              EXPRESSION is true
       
       ! EXPRESSION 表达式这样写为假
              EXPRESSION is false

       EXPRESSION1 -a EXPRESSION2 多个表达式用-a选项来串连起来
              both EXPRESSION1 and EXPRESSION2 are true

       EXPRESSION1 -o EXPRESSION2 -o选项是或者的意思
              either EXPRESSION1 or EXPRESSION2 is true

       -n STRING  
              the length of STRING is nonzero -n 字符串非零

       STRING equivalent to -n STRING 

       -z STRING
              the length of STRING is zero  -z 字符串为零

       STRING1 = STRING2  =字符串1等于字符串2
              the strings are equal

       STRING1 != STRING2  !=字符串1不等于字符串2
              the strings are not equal

       INTEGER1 -eq INTEGER2 -eq整数1等于整数2
              INTEGER1 is equal to INTEGER2
       
       INTEGER1 -ge INTEGER2 -ge整数1大于或等于整数2
              INTEGER1 is greater than or equal to INTEGER2

       INTEGER1 -gt INTEGER2 -gt整数1大于整数2
              INTEGER1 is greater than INTEGER2

       INTEGER1 -le INTEGER2 -le整数1小于等于整数2
              INTEGER1 is less than or equal to INTEGER2

       INTEGER1 -lt INTEGER2 -lt整数1小于整数2
              INTEGER1 is less than INTEGER2

       INTEGER1 -ne INTEGER2  -ne整数1不等于整数2
              INTEGER1 is not equal to INTEGER2
              
    --------------------------------------------
    文件测试 [操作符  文件或目录]
    [-e dir|file]
    [-d dir]  目录
    [-f dir]  是否存在，而且是文件
    [-r dir]  当前用户对该文件是否有读权限
    [-x dir]  执行
    [-w dir]  写
    [-L dir]  软连接   
 例:root@ansible-10:/home/king/shell# [ ! -d /ccc ] && mkdir ccc  //如果没有CC目录，我就创建 
    root@ansible-10:/home/king/shell# [  -d /bbb ] || mkdir bbb  //如果我有bbb目录，第二执行失败或者说如果我没有bbb目录，我就创建

    





























































